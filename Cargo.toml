[workspace]
resolver = "2"
# This value defines every rust crate for the project. Each entry must map to
# the path to a crate.
members = [
    "dsc",
    "lib/dsc_lib",
    "resources/dscecho",
    "lib/osinfo_lib",
    "resources/osinfo",
    "lib/pal",
    "resources/process",
    "resources/registry",
    "lib/registry_lib",
    "resources/runcommandonset",
    "lib/security_context_lib",
    "resources/sshdconfig",
    "tools/dsctest",
    "tools/test_group_resource",
    "tree-sitter-dscexpression",
    "tree-sitter-ssh-server-config",
    "y2j"
]
# This value is modified by the `Set-DefaultWorkspaceMember` helper.
# Be sure to use `Reset-DefaultWorkspaceMember` before committing to
# avoid unintentionally modifying this value.
default-members = [
    "dsc",
    "lib/dsc_lib",
    "resources/dscecho",
    "lib/osinfo_lib",
    "resources/osinfo",
    "lib/pal",
    "resources/process",
    "resources/registry",
    "lib/registry_lib",
    "resources/runcommandonset",
    "lib/security_context_lib",
    "resources/sshdconfig",
    "tools/dsctest",
    "tools/test_group_resource",
    "tree-sitter-dscexpression",
    "tree-sitter-ssh-server-config",
    "y2j"
]

[workspace.metadata.groups]
# The entries in this table map crates by operating system. Use the helper
# function `Set-DefaultWorkspaceMember` to choose the correct target for your
# current operating system to enable faster builds.
Windows = [
    "dsc",
    "lib/dsc_lib",
    "resources/dscecho",
    "lib/osinfo_lib",
    "resources/osinfo",
    "lib/pal",
    "resources/process",
    "resources/registry",
    "lib/registry_lib",
    "resources/runcommandonset",
    "lib/security_context_lib",
    "resources/sshdconfig",
    "tools/dsctest",
    "tools/test_group_resource",
    "tree-sitter-dscexpression",
    "tree-sitter-ssh-server-config",
    "y2j"
]
macOS = [
    "dsc",
    "lib/dsc_lib",
    "resources/dscecho",
    "lib/osinfo_lib",
    "resources/osinfo",
    "resources/process",
    "resources/runcommandonset",
    "lib/security_context_lib",
    "resources/sshdconfig",
    "tools/dsctest",
    "tools/test_group_resource",
    "tree-sitter-dscexpression",
    "tree-sitter-ssh-server-config",
    "y2j"
]
Linux = [
    "dsc",
    "lib/dsc_lib",
    "resources/dscecho",
    "lib/osinfo_lib",
    "resources/osinfo",
    "resources/process",
    "resources/runcommandonset",
    "lib/security_context_lib",
    "resources/sshdconfig",
    "tools/dsctest",
    "tools/test_group_resource",
    "tree-sitter-dscexpression",
    "tree-sitter-ssh-server-config",
    "y2j"
]

[profile.release]
codegen-units = 1           # reduces binary size by ~2%
debug = "full"              # No one needs an undebuggable release binary
lto = true                  # reduces binary size by ~14%
opt-level = "s"             # reduces binary size by ~25%
panic = "abort"             # reduces binary size by ~50% in combination with -Zbuild-std-features=panic_immediate_abort
split-debuginfo = "packed"  # generates a seperate *.dwp/*.dSYM so the binary can get stripped
strip = "symbols"           # See split-debuginfo - allows us to drop the size by ~65%

[workspace.dependencies]
#external dependencies
# dsc_lib
base32 = { version = "0.5" }
# dsc_lib
base64 = { version = "0.22" }
# dsc_lib, sshdconfig
chrono = { version = "0.4" }
# dsc, dsc_lib, dscecho, registry, runcommandonset, sshdconfig, dsctest, test_group_resource
clap = { version = "4.5", features = ["derive"] }
# dsc
clap_complete = { version = "4.5" }
# dsc, registry, registry_lib, sshdconfig
crossterm = { version = "0.29" }
# dsc
ctrlc = { version = "3.5" }
# dsc_lib
derive_builder = { version = "0.20" }
# dsc, dsc_lib
indicatif = { version = "0.18" }
# security_context_lib::windows
is_elevated = { version = "0.1" }
# dsc, dsc_lib
jsonschema = { version = "0.33", default-features = false }
# dsc_lib
linked-hash-map = { version = "0.5" }
# dsc_lib
murmurhash64 = { version = "0.3" }
# security_context_lib::not_windows
nix = { version = "0.30" }
# dsc_lib
num-traits = { version = "0.2" }
# osinfo_lib
os_info = { version = "3.11" }
# dsc, dsc_lib
path-absolutize = { version = "3.1" }
# dsc, dsc_lib
regex = { version = "1.11" }
# registry, registry_lib
registry = { version = "1.3" }
# dsc
rmcp = { version = "0.7" }
# dsc_lib
rt-format = { version = "0.3" }
# dsc, dsc_lib, dscecho, registry, registry_lib, runcommandonset, sshdconfig
rust-i18n = { version = "3.1" }
# dsc, dsc_lib, dscecho, registry, registry_lib, sshdconfig, dsctest, test_group_resource
schemars = { version = "1.0", features = ["preserve_order"] }
# dsc, dsc_lib
semver = { version = "1.0" }
# dsc, dsc_lib, dscecho, osinfo_lib, process, registry, registry_lib, runcommandonset, sshdconfig, dsctest, test_group_resource
serde = { version = "1.0", features = ["derive"] }
# dsc, dsc_lib, dscecho, osinfo_lib, osinfo, process, registry, registry_lib, runcommandonset, sshdconfig, dsctest, test_group_resource, y2j
serde_json = { version = "1.0", features = ["preserve_order"] }
# dsc, dsc_lib, y2j
serde_yaml = { version = "0.9" }
# dsc, y2j
syntect = { version = "5.3", features = ["default-fancy"], default-features = false }
# dsc, process
sysinfo = { version = "0.37" }
# sshdconfig
tempfile = { version = "3.23" }
# dsc, dsc_lib, registry, registry_lib, sshdconfig
thiserror = { version = "2.0" }
# dsc, dsc_lib
tokio = { version = "1.47" }
# dsc
tokio-util = { version = "0.7" }
# dsc, dsc_lib, registry, registry_lib, runcommandonset, sshdconfig
tracing = { version = "0.1" }
# dsc, dsc_lib
tracing-indicatif = { version = "0.3" }
# dsc, registry, registry_lib, runcommandonset, sshdconfig
tracing-subscriber = { version = "0.3", features = ["ansi", "env-filter", "json"] }
# dsc_lib, sshdconfig, tree-sitter-dscexpression, tree-sitter-ssh-server-config
tree-sitter = { version = "0.25" }
# tree-sitter-dscexpression, tree-sitter-ssh-server-config
tree-sitter-language = { version = "0.1" }
# dsc_lib, sshdconfig, tree-sitter-dscexpression, tree-sitter-ssh-server-config
tree-sitter-rust = { version = "0.24" }
# registry, registry_lib
utfx = { version = "0.1" }
# dsc_lib
uuid = { version = "1.18", features = ["v4"] }
# dsc_lib
which = { version = "8.0" }

# build-only dependencies
# dsc_lib, registry_lib, sshdconfig, tree-sitter-dscexpression, tree-sitter-ssh-server-config
cc = { version = "1.2" }
# registry, registry_lib
static_vcruntime = { version = "2.0" }

# Workspace crates as dependencies
dsc_lib = { path = "lib/dsc_lib" }
osinfo_lib = { path = "lib/osinfo_lib" }
security_context_lib = { path = "lib/security_context_lib" }
tree-sitter-dscexpression = { path = "tree-sitter-dscexpression" }
registry_lib = { path = "lib/registry_lib" }
tree-sitter-ssh-server-config = { path = "tree-sitter-ssh-server-config" }
