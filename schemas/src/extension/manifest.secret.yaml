# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/extension/manifest.secret.yaml

title: Secret operation command
description: >-
  Defines how DSC must call the DSC extension to retrieve a secret value.
markdownDescription: | # VS Code only
  ***
  [_Online Documentation_][00]
  ***

  Defines how DSC must call the DSC extension to retrieve a secret value. An
  extension that defines this field in its manifest has the `secret` capability.

  The secret operation is expected to output a single line to stdout containing
  the secret text. If the extension outputs no data to stdout, DSC treats it as
  "no secret returned". If the extension outputs multiple lines, DSC treats that
  as an error.

  For details about the output format, see
  [Secret extension operation stdout][01].

  [00]: <DOCS_BASE_URL>/reference/schemas/extension/manifest/secret?<DOCS_VERSION_PIN>
  [01]: <DOCS_BASE_URL>/reference/schemas/extension/stdout/secret?<DOCS_VERSION_PIN>

type: object
required:
  - executable
properties:
  executable:
    $ref: /<PREFIX>/<VERSION>/definitions/commandExecutable.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      DSC expects extensions implementing the `secret` capability to adhere to the
      following contract:
      
        1. If the extension retrieves the secret, the extension must emit the secret
          to stdout as a single line of plaintext and exit with code `0`. DSC
          consumes the emitted output and makes the secret available in the
          configuration document.

          If the extension emits more than one line to stdout, DSC raises an error.
        1. If the extension cannot retrieve the secret because the secret doesn't
          exist, the extension must not emit any text to stdout and must exit with
          code `0`. DSC interprets this result as the secret not existing in the
          vault.
        1. If the extension cannot retrieve the secret for any other reason, such
          as invalid credentials or an API error, the extension should emit
          a descriptive error message as a JSON Line to stderr and exit with a
          nonzero exit code. DSC interprets the nonzero exit code as an operational
          failure and surfaces that information and any emitted error messages to
          the user.

      When the exit code for the operation is `0`, DSC interprets the operation as
      completing without errors. For extensions, failure to retrieve a secret
      because it doesn't exist is _not_ an error. Failure to retrieve a secret
      for any other reason _is_ an error and the extension should exit with a
      nonzero code. For an improved user experience, the extension should define
      the `exitCodes` field in the extension manifest to indicate what the nonzero
      exit code means.
      
      For more information about how DSC validates the data for stdout, see
      [Secret extension operation stdout][01]. For more information about defining
      exit codes for the extension, see [`exitCodes`][02] in the extension manifest
      schema reference.

      [00]: <DOCS_BASE_URL>/reference/schemas/extension/manifest/secret?<DOCS_VERSION_PIN>
      [01]: <DOCS_BASE_URL>/reference/schemas/extension/stdout/secret?<DOCS_VERSION_PIN>
      [02]: <DOCS_BASE_URL>/reference/schemas/extension/manifest/root?<DOCS_VERSION_PIN>#exitcodes
  args:
    title: Arguments
    description: >-
      Defines an ordered list of arguments to pass to the command.
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines an ordered list of arguments to pass to the command. Items can be plain strings or
      structured entries indicating which argument name should receive the secret name or the vault
      name.

      DSC expands structured entries as follows:

      - `{ "nameArg": "<flag>" }` expands to `"<flag>", "<secret-name>"`.
      - `{ "vaultArg": "<flag>" }` expands to `"<flag>", "<vault-name>"` (only when a vault is
        specified by the caller).

      [01]: <DOCS_BASE_URL>/reference/schemas/extension/manifest/secret?<DOCS_VERSION_PIN>#args
    type: array
    items:
      anyOf:
        - type: string
        - type: object
          additionalProperties: false
          required:
            - nameArg
          properties:
            nameArg:
              type: string
        - type: object
          additionalProperties: false
          required:
            - vaultArg
          properties:
            vaultArg:
              type: string

defaultSnippets: # VS Code only
  - label: ' Define without arguments'
    markdownDescription: |
      Define the `secret` command for the extension when no arguments are required.
    body:
      executable: ${2:executable_name}
  - label: ' Define with arguments (flags + name)'
    markdownDescription: |-
      Define the `secret` command where the secret name is passed to a specific flag.
    body:
      executable: ${2:executable_name}
      args:
        - ${3:--get-secret}
        - nameArg: ${4:--name}
  - label: ' Define with arguments (flags + name + vault)'
    markdownDescription: |-
      Define the `secret` command where both the secret name and the vault name are passed.
    body:
      executable: ${2:executable_name}
      args:
        - ${3:--get-secret}
        - nameArg: ${4:--name}
        - vaultArg: ${5:--vault}
