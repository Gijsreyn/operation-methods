# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/resource/manifest.validate.yaml

title: Validate Method
description: >-
  Defines how DSC must call the DSC resource to validate the state of an instance. This method is
  mandatory for DSC group resources. It's ignored for all other DSC resources.

markdownDescription: | # VS Code only
  ***
  [_Online Documentation_][01]
  ***

  Defines how DSC must call the DSC resource to validate the state of an instance. This method is
  mandatory for DSC group resources. It's ignored for all other DSC resources.

  DSC sends data to the command in three ways:

  1. When `input` is `stdin`, DSC sends the data as a string representing the data as a compressed
     JSON object without spaces or newlines between the object properties.
  1. When `input` is `env`, DSC sends the data as environment variables. It creates an environment
     variable for each property in the input data object, using the name and value of the property.
  1. When the `args` array includes a JSON input argument definition, DSC sends the data as a string
     representing the data as a compressed JSON object to the specified argument.

  If you don't define the `input` property and don't define a JSON input argument, DSC can't pass
  the input JSON to the resource. You can only define one JSON input argument for a command.

  You must define the `input` property, one JSON input argument in the `args` property array, or
  both.

  [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>

type: object
required:
  - executable
properties:
  executable:
    $ref: /<PREFIX>/<VERSION>/definitions/commandExecutable.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines the name of the command to run. The value must be the name of a command discoverable
      in the system's `PATH` environment variable or the full path to the command. A file extension
      is only required when the command isn't recognizable by the operating system as an
      executable.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>#executable
  args:
    $ref: /<PREFIX>/<VERSION>/definitions/commandArgs.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines an array of strings to pass as arguments to the command. DSC passes the arguments to
      the command in the order they're specified.

      For example, the given the following definition:

      ```json
      {
        "executable": "myresource",
        "args":       ["config", "validate"],
      }
      ```

      DSC invokes the command for the resource as:

      ```bash
      myresource config validate
      ```

      If you want to pass the JSON object representing the property bag for a resource instance to
      an argument, you can define a single item in the array as a JSON object. Indicate the name of
      the argument with the `jsonInputArg` string property and whether the argument is mandatory
      for the command with the `mandatory` boolean property.` When the `mandatory` property is
      defined as `true`, DSC passes an empty string to the argument when no JSON input is
      available. When the `mandatory` property is undefined or defined as `false`, DSC doesn't pass
      the argument at all when no JSON input is available. The default value for the `mandatory`
      property is `false`.

      For example, given the following definition:

      ```json
      {
        "executable": "myresource"
        "args":       [
          "config",
          "validate",
          { "jsonInputArg": "--properties" }
        ]
      }
      ```

      DSC invokes the command for the resource as:

      ```bash
      myresource config validate --properties <JSON string of instance properties>
      ```

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>#args
  input:
    $ref: /<PREFIX>/<VERSION>/definitions/inputKind.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines how DSC should pass input to the command, either as environment variables or JSON
      over `stdin`. This property is optional when you define an object in the `args` list. If
      you define a JSON input argument and an `input`, DSC sends the JSON data both ways:

      - If you define `input` as `env` and a JSON input argument, DSC sets an environment variable
        for each property in the JSON input and passes the JSON input object as a string to the
        defined argument.
      - If you define `input` as `stdin` and a JSON input argument, DSC passes the JSON input over
        stdin and as a string to the defined argument.
      - If you define a JSON input argument without defining the `input` property, DSC only passes
        the JSON input as a string to the defined argument.
      
      If you don't define the `input` property and don't define a JSON input argument, DSC can't
      pass the input JSON to the resource. This makes the manifest invalid. You must define the
      `input` property, a JSON input argument in the `args` property array, or both.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>#input

# Need to use a oneOf with three possibilities because YAML extension in VS Code doesn't understand
# minContains - so we can't use a single if/else/then. Note that JSON, but not YAML, will fail when
# the manifest defines more than one JSON input argument. If/when the YAML extension is updated to
# support 2019-09 and later, we can simplify this to two schemas.
#
# We use long lines for error messages, which can't use Markdown.
oneOf:
  - # Validate command with explicit input kind - when `input` is defined and `args` is only strings.
    # This subschema never triggers an error in testing.
    required: [input]
    not:
      properties: { args: { contains: { type: object } } } 
  - # Validate command with JSON input argument - when `input` isn't defined and `args` doesn't include
    # a JSON input argument. Only raises an error when `args` has zero JSON input arguments or more
    # than one.
    not: { required: [input] }
    properties:
      args:
        errorMessage: |-
          The `validate` command doesn't define either the `input` property or a JSON input argument, or it defines more than one JSON input argument. If you don't define the `input` property and don't define a JSON input argument, DSC can't pass the input JSON to the resource. You can only define one JSON input argument for a command.

          You must define the `input` property, one JSON input argument in the `args` property array, or both. For more information, see:

          <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>
        contains:  { type: object }
        minContains: 1
        maxContains: 1
  - # Validate command with explicit input kind and JSON input argument - when `input` is defined and
    # args includes a JSON input argument. Only raises an error when `input` is defined and `args`
    # contains more than one JSON input argument.
    required: [input]
    properties:
      args:
        errorMessage: |-
          You can only specify one JSON input argument for the `validate` command. Remove the extra JSON input argument. When you use the JSON input argument, DSC sends the full JSON object as a string to the named argument.

          For more information, see:

          <DOCS_BASE_URL>/reference/schemas/resource/manifest/validate?<DOCS_VERSION_PIN>
        contains:  { type: object }
        minContains: 1
        maxContains: 1

defaultSnippets: # VS Code only
  - label: ' Define without arguments'
    markdownDescription: |
      Define the `validate` command for the resource when no arguments are required and the JSON
      input is sent over stdin or as environment variables.
    body:
      input:      ${1|stdin,env|}
      executable: ${2:executable_name}
  - label: ' Define with string arguments'
    markdownDescription: |-
      Define the `validate` command for the resource when at least one argument is required and the
      JSON input is sent over stdin or as environment variables.
    body:
      input:      ${1|stdin,env|}
      executable: ${2:executable_name}
      args:
        - ${3:--first-argument}
  - label: ' Define with a JSON input argument'
    markdownDescription: |-
      Define the `validate` command for the resource where the JSON input is passed as a one-line
      JSON object string to the specified argument.
    body:
      executable: ${1:executable_name}
      args:
        - jsonInputArg:  ${2:argument_name}
          mandatory:    ^$3
