# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/definitions/resourceCapabilities.yaml

title: Resource capabilities
description: >-
  Define the operations you can invoke for a resource and how the resource behaves when invoked.
  
markdownDescription: |-
  ***
  [_Online Documentation_][00]
  ***

  DSC resources always have at least one capability. Resource capabilities define the operations
  you can invoke for a resource and how the resource behaves when invoked.

  For more information about the operations you can invoke for a resource, see
  [DSC resource operations][01].

  <!-- Link reference definitions -->
  [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>
  [00]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>

type: array
items:
  type: string
  enum:
    - get
    - set
    - setHandlesExist
    - whatIf
    - test
    - delete
    - export
    - resolve
  markdownEnumDescriptions:
    - |- # get
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `get` capability supports retrieving the current state of an instance
      with the [Get][01] operation.

      A command resource has this capability when its resource manifest defines the [get][02]
      property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#get
      [01]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>#get-operation
      [02]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/get?<DOCS_VERSION_PIN>

    - |- # set
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `set` capability supports enforcing the desired state of an instance with
      the [Set][01] operation. Resources without this capability can't be used with the
      [dsc resource set][02] or [dsc config set][03] commands unless they're defined in a
      `Microsoft.DSC/Assertion` group as a nested instance.

      A command resource has this capability when its resource manifest defines the [set][04]
      property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#set
      [01]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>#set-operation
      [02]: <DOCS_BASE_URL>/reference/cli/resource/set?<DOCS_VERSION_PIN>
      [03]: <DOCS_BASE_URL>/reference/cli/config/set?<DOCS_VERSION_PIN>
      [04]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set?<DOCS_VERSION_PIN>

    - |- # setHandlesExist
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `setHandlesExist` capability indicates that you can use the [Set][01]
      operation to delete an instance. Resources with this capability must have the [_exist][02]
      canonical resource property. Resources that don't have the `_exist` property never have this
      capability.

      When a resource has the `_exist` property but not the `setHandlesExist` capability:

      - If the resource has the `delete` capability, DSC invokes the [Delete][03] operation instead
        of **Set** when the desired state for an instance defines `_exist` as false.
      - If the resource doesn't have the `delete` capability, DSC raises an error during a **Set**
        operation when the desired state for an instance defines `_exist` as false.

      A command resource has this capability when its resource manifest defines the
      [set.handlesExist][04] subproperty as `true`.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#sethandlesexist
      [01]: <DOCS_BASE_URL>/concepts/resources/operations<DOCS_VERSION_PIN>#set-operation
      [02]: <DOCS_BASE_URL>/reference/schemas/resource/properties/exist<DOCS_VERSION_PIN>
      [03]: <DOCS_BASE_URL>/concepts/resources/operations<DOCS_VERSION_PIN>#delete-operation
      [04]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set<DOCS_VERSION_PIN>#handlesexist

    - |- # whatIf
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `whatIf` capability indicates that you can use the [Set][01] operation in
      what-if mode to have the resource return explicit information about how it would modify state
      in an actual **Set** operation.

      When a resource doesn't have this capability, DSC synthesizes how the resource would change
      an instance by converting the **Test** result for the instance into a **Set** result. The
      synthetic operation can't indicate potential issues or changes that can't be determined by
      comparing the result of the **Test** operation against the resource's desired state. For
      example, the credentials used to test a resource might be valid for that operation, but not
      have permissions to actually modify the system state. Only a resource with this capability
      can fully report whether and how the resource would change system state.

      A resource has this capability when it defines the [whatIf][02] property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#whatif
      [01]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>#set-operation
      [02]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/whatif?<DOCS_VERSION_PIN>

    - |- # test
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `test` capability indicates that it implements the [Test][01] operation
      directly. Resources with this capability must have the [_inDesiredState][02] canonical
      resource property. Resources that don't have the `_inDesiredState` property never have this
      capability.

      When a resource doesn't have this capability, DSC uses a synthetic test for instances of the
      resource. DSC performs the synthetic test by:

      1. Invoking the **Get** operation on the resource to retrieve the actual state of the
         instance.
      1. Synthetically testing each property for the desired state of an instance against the
         actual state returned. The synthetic test uses strict, case-sensitive equivalence.
      1. If the desired state for a property and the actual state aren't the same, DSC marks the
         property as out of the desired state.
      1. If any properties are out of the desired state, DSC reports the entire instance as not
         being in the desired state.

      Synthetic testing can't account for all resource behaviors. For example, if a package
      resource allows users to define a version range for the package, the **Get** operation
      returns the actual version of the package, like `1.2.3`. If the user specified the version
      range `~1` (NPM syntax indicating the package should be latest released semantic version with
      major version `1`), DSC would compare the desired state `~1` against the actual state `1.2.3`
      and consider the package to be in the incorrect state, even if `1.2.3` is actually the latest
      release matching the version pin.

      Any resource that has properties which can't use a strict case-sensitive comparison check
      should have this capability.

      A command resource has this capability when its resource manifest defines the [test][03]
      property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#test
      [01]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>#test-operation
      [02]: <DOCS_BASE_URL>/reference/schemas/resource/properties/inDesiredState?<DOCS_VERSION_PIN>
      [03]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/test?<DOCS_VERSION_PIN>

    - |- # delete
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `delete` capability supports removing an instance with the [Delete][01]
      operation and the [dsc resource delete][02] command.

      This capability isn't mutually exclusive with the `setHandlesExist` property. A resource can handle
      the `_exist` property in **Set** operations and be called directly with `dsc resource delete` to
      remove an instance.

      For resources with the `delete` capability and the [_exist][03] canonical resource property:

      - If the resource doesn't have the `setHandlesExist` capability, DSC invokes the **Delete**
        operation for the resource instead of **Set** when the desired state defines `_exist` as
        `false`.
      - If the resource does have the `setHandlesExist` capability, DSC invokes the **Set** operation for
        the resource when the desired state defines `_exist` as `false`.

      Resources with the `delete` capability that don't have the `_exist` canonical resource property
      must implement their **Set** operation to handle removing instances. DSC can't infer existence
      semantics without the `_exist` property.

      A command resource has this capability when its resource manifest defines the [delete][04]
      property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#delete
      [01]: <DOCS_BASE_URL>/concepts/resources/operations?<DOCS_VERSION_PIN>#delete-operation
      [02]: <DOCS_BASE_URL>/reference/cli/resource/delete?<DOCS_VERSION_PIN>
      [03]: <DOCS_BASE_URL>/reference/schemas/resource/properties/exist?<DOCS_VERSION_PIN>
      [04]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/delete?<DOCS_VERSION_PIN>


    - |- # export
      ***
      [_Online Documentation_][00]
      ***

      A resource with the `export` capability supports enumerating every instance of the resource
      with the [Export][01] operation.

      You can use resources with this capability with the following commands:

      - [dsc config export][02] to return a configuration document representing the actual state
        for every instance of each resource defined in the input document.
      - [dsc resource export][03] to return a configuration document representing the actual state
        for every instance of the input resource.
      - `dsc resource get` with the [--all][04] option to return the actual state of every instance
        of the input resource.

      A command resource has this capability when its resource manifest defines the [export][05]
      property.
      
      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#export
      [01]: <DOCS_BASE_URL>/concepts/resources/operations<DOCS_VERSION_PIN>#export-operation
      [02]: <DOCS_BASE_URL>/reference/cli/config/export?<DOCS_VERSION_PIN>
      [03]: <DOCS_BASE_URL>/reference/cli/resource/export?<DOCS_VERSION_PIN>
      [04]: <DOCS_BASE_URL>/reference/cli/resource/get?<DOCS_VERSION_PIN>#--all
      [05]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/export?<DOCS_VERSION_PIN>

    - |- # resolve
      ***
      [_Online Documentation_][00]
      ***
      
      A resource with the `resolve` capability supports resolving nested resource instances from an
      external source. This capability is primarily used by [importer resources][01] to enable users to
      compose configuration documents.

      A command resource has this capability when its resource manifest defines the [resolve][0220]
      property.

      <!-- Link reference definitions -->
      [00]: <DOCS_BASE_URL>/reference/schemas/definitions/resourceCapabilities?<DOCS_VERSION_PIN>#resolve
      [01]: <DOCS_BASE_URL>/concepts/resources/kinds?<DOCS_VERSION_PIN>#importer-resources
      [02]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/resolve?<DOCS_VERSION_PIN>
