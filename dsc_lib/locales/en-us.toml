_version = 1

[configure.constraints]
minLengthIsNull = "Parameter '#{name}' has minimum length constraint but is null"
notMinLength = "Parameter '#{name}' has minimum length constraint of #{min_length} but is #{length}"
minLengthNotStringOrArray = "Parameter '#{name}' has minimum length constraint but is not a string or array"

maxLengthIsNull = "Parameter '#{name}' has maximum length constraint but is null"
maxLengthExceeded = "Parameter '#{name}' has maximum length constraint of #{max_length} but is #{length}"
maxLengthNotStringOrArray = "Parameter '#{name}' has maximum length constraint but is not a string or array"

minValueIsNull = "Parameter '#{name}' has minimum value constraint but is null"
notMinValue = "Parameter '#{name}' has minimum value constraint of #{min_value} but is #{value}"
minValueNotInteger = "Parameter '#{name}' has minimum value constraint but is not an integer"
maxValueIsNull = "Parameter '#{name}' has maximum value constraint but is null"
notMaxValue = "Parameter '#{name}' has maximum value constraint of #{max_value} but is #{value}"
maxValueNotInteger = "Parameter '#{name}' has maximum value constraint but is not an integer"

allowedValuesIsNull = "Parameter '#{name}' has allowed values constraint but is null"
notAllowedValue = "Parameter '#{name}' has allowed values constraint but is not in the list of allowed values"
allowedValuesNotStringOrInteger = "Parameter '#{name}' has allowed values constraint but is not a string or integer"

[configure.dependsOn]
duplicateResource = "Resource named '#{name}' is specified more than once in the configuration"
syntaxIncorrect = "'dependsOn' syntax is incorrect: #{dependency}"
dependencyNotFound = "'dependsOn' resource name '#{dependency_name}' does not exist for resource named '#{resource_name}'"
dependencyTypeMismatch = "'dependsOn' resource type '#{resource_type}' does not match resource type '#{dependency_type}' for resource named '#{resource_name}'"
resourceNotInOrder = "Resource not found in order"
dependencyNotInOrder = "Dependency not found in order"
circularDependency = "Circular dependency detected for resource named '#{resource}'"
invocationOrder = "Resource invocation order"

[configure.mod]
escapePropertyValues = "Escape returned property values"
nestedArraysNotSupported = "Nested arrays not supported"
arrayElementCouldNotTransformAsString = "Array element could not be transformed as string"
valueCouldNotBeTransformedAsString = "Property value '#{value}' could not be transformed as string"
elevationRequired = "Elevated security context required"
restrictedRequired = "Restricted security context required"
desired = "Desired state: #{state}"
handlesExist = "Resource handles _exist or _exist is true"
whatIfNotSupportedForDelete = "What-if execution not supported for delete"
implementsDelete = "Resource implements delete and _exist is false"
groupNotSupportedForDelete = "Group resources not supported for delete"
deleteNotSupported = "Resource '#{resource}' does not support `delete` and does not handle `_exist` as false"
expectedState = "Expected state: #{state}"
exportInput = "Export input: #{input}"
noParameters = "No parameters defined in configuration and no parameters input"
noParametersDefined = "No parameters defined in configuration"
processingParameter = "Processing parameter '#{name}'"
setDefaultParameter = "Set default parameter '#{name}'"
defaultStringNotDefined = "Default value as string is not defined"
noParametersInput = "No parameters input"
setSecureParameter = "Set secure parameter '#{name}'"
setParameter = "Set parameter '#{name}' to '#{value}'"
parameterNotDefined = "Parameter '#{name}' is not defined in configuration"
noVariables = "No variables defined in configuration"
setVariable = "Set variable '#{name}' to '#{value}'"
parameterNotString = "Parameter '#{name}' is not a string"
parameterNotInteger = "Parameter '#{name}' is not an integer"
parameterNotBoolean = "Parameter '#{name}' is not a boolean"
parameterNotArray = "Parameter '#{name}' is not an array"
parameterNotObject = "Parameter '#{name}' is not an object"
invokePropertyExpressions = "Invoke property expressions"
invokeExpression = "Invoke property expression for #{name}: #{value}"

[discovery.commandDiscovery]
couldNotReadSetting = "Could not read 'resourcePath' setting"
appendingEnvPath = "Appending PATH to resourcePath"
originalPath = "Original PATH: #{path}"
failedGetEnvPath = "Failed to get PATH environment variable"
exeHomeAlreadyInPath = "Exe home is already in path: #{path}"
addExeHomeToPath = "Adding exe home to path: #{path}"
usingResourcePath = "Using Resource Path: #{path}"
discoverResources = "Discovering resources using filter: #{filter}"
invalidAdapterFilter = "Could not build Regex filter for adapter name"
progressSearching = "Searching for resources"
foundResourceManifest = "Found resource manifest: #{path}"
adapterFound = "Resource adapter '#{adapter}' found"
resourceFound = "Resource '#{resource}' found"
